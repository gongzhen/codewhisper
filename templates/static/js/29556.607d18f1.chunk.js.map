{"version":3,"file":"static/js/29556.607d18f1.chunk.js","mappings":"gOASA,MAAMA,EAAmBC,EAAAA,KAAW,IAAM,uGAuE1C,EArE6BC,KAC3B,MAAM,aAAEC,IAAiBC,EAAAA,EAAAA,MAClBC,EAASC,IAAcC,EAAAA,EAAAA,UAAwB,OAC/CC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAwB,OAC5C,WAAEK,IAAeC,EAAAA,EAAAA,KAGjBC,EAAsD,SAAnCC,OAAeD,gBAiCxC,GA/BAE,QAAQC,IAAI,kCAAmCd,IAI/Ce,EAAAA,EAAAA,WAAU,KACR,GAAIf,GAAwC,IAAxBA,EAAagB,OAAc,CAC7C,MAAMC,EAAWjB,EAAa,GAC9BM,GAAa,GACbE,EAAS,MACTL,EAAW,OAEXe,EAAAA,EAAAA,GAAeD,GACZE,KAAKC,IAEgB,KAAhBA,EAAKC,OACPb,EAAS,yCAETL,EAAWiB,GAEbd,GAAa,KAEdgB,MAAM,KACLd,EAAS,gCACTF,GAAa,IAEnB,MACEH,EAAW,MACXK,EAAS,OAEV,CAACR,KAECA,GAAwC,IAAxBA,EAAagB,OAChC,OAAO,KAGT,MACMO,EADWvB,EAAa,GACJwB,MAAM,KAAKC,OAAS,GACxCC,EAAWH,EAASC,MAAM,KAAKC,OAAS,YAE9C,OACEE,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,OAAQ,OAAQC,SAAU,OAAQC,WAAYvB,EAAa,UAAY,QAASwB,SAAA,EAC7GC,EAAAA,EAAAA,KAACC,EAAAA,EAAWC,MAAK,CAACC,MAAO,EAAGT,MAAO,CAAEU,MAAO7B,EAAa,4BAA8B,sBAAuB8B,aAAc,OAAQC,aAAc,cAAa/B,EAAa,UAAY,WAAagC,cAAe,OAAQR,SACvNV,IAEJlB,IAAa6B,EAAAA,EAAAA,KAAA,OAAKN,MAAO,CAAEc,QAAS,OAAQC,eAAgB,SAAUC,WAAY,QAASX,UAACC,EAAAA,EAAAA,KAACW,EAAAA,EAAI,CAACC,KAAK,YACvGvC,IAAS2B,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CAACC,QAASzC,EAAO0C,KAAK,QAAQC,UAAQ,IACzC,OAAZhD,IACCgC,EAAAA,EAAAA,KAACpC,EAAAA,SAAc,CAACqD,UAAUjB,EAAAA,EAAAA,KAACW,EAAAA,EAAI,IAAIZ,UAEhCC,EAAAA,EAAAA,KAACrC,EAAgB,CACZuD,SAAU,SAAS1B,MAAaxB,YAChCS,gBAAiBA,S","sources":["components/CodeViewer.tsx"],"sourcesContent":["// src/components/CodeViewer.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { useFolderContext } from '../context/FolderContext';\nimport { getFileContent } from '../apis/folderApi';\nimport { Spin, Typography, Alert } from 'antd';\nimport { useTheme } from '../context/ThemeContext';\n\n// Lazy load the MarkdownRenderer for syntax highlighting\nconst MarkdownRenderer = React.lazy(() => import(\"./MarkdownRenderer\"));\n\nconst CodeViewer: React.FC = () => {\n  const { selectedKeys } = useFolderContext();\n  const [content, setContent] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { isDarkMode } = useTheme();\n\n  // This value is needed by the MarkdownRenderer\n  const enableCodeApply = (window as any).enableCodeApply === 'true';\n\n  console.log(\"CodeViewer selectedKeys in App:\", selectedKeys);\n\n    // in src/components/CodeViewer.tsx\n\n  useEffect(() => {\n    if (selectedKeys && selectedKeys.length === 1) {\n      const filePath = selectedKeys[0] as string;\n      setIsLoading(true);\n      setError(null);\n      setContent(null);\n      \n      getFileContent(filePath)\n        .then(data => {\n          // Check if the returned data is empty\n          if (data.trim() === '') {\n            setError('File is empty or could not be loaded.');\n          } else {\n            setContent(data);\n          }\n          setIsLoading(false);\n        })\n        .catch(() => {\n          setError('Failed to load file content.');\n          setIsLoading(false);\n        });\n    } else {\n      setContent(null);\n      setError(null);\n    }\n  }, [selectedKeys]);\n\n  if (!selectedKeys || selectedKeys.length !== 1) {\n    return null; // Don't render if not exactly one file is selected\n  }\n\n  const filePath = selectedKeys[0] as string;\n  const fileName = filePath.split('/').pop() || '';\n  const language = fileName.split('.').pop() || 'plaintext';\n\n  return (\n    <div style={{ padding: '16px', height: '100%', overflow: 'auto', background: isDarkMode ? '#1f1f1f' : '#fff' }}>\n      <Typography.Title level={4} style={{ color: isDarkMode ? 'rgba(255, 255, 255, 0.85)' : 'rgba(0, 0, 0, 0.85)', marginBottom: '16px', borderBottom: `1px solid ${isDarkMode ? '#303030' : '#f0f0f0'}`, paddingBottom: '8px' }}>\n          {fileName}\n      </Typography.Title>\n      {isLoading && <div style={{ display: 'flex', justifyContent: 'center', paddingTop: '20px' }}><Spin size=\"large\" /></div>}\n      {error && <Alert message={error} type=\"error\" showIcon />}\n      {content !== null && (\n        <React.Suspense fallback={<Spin />}>\n           {/* Add the enableCodeApply prop here */}\n           <MarkdownRenderer\n                markdown={`\\`\\`\\`${language}\\n${content}\\n\\`\\`\\``}\n                enableCodeApply={enableCodeApply}\n            />\n        </React.Suspense>\n      )}\n    </div>\n  );\n};\n\nexport default CodeViewer;"],"names":["MarkdownRenderer","React","CodeViewer","selectedKeys","useFolderContext","content","setContent","useState","isLoading","setIsLoading","error","setError","isDarkMode","useTheme","enableCodeApply","window","console","log","useEffect","length","filePath","getFileContent","then","data","trim","catch","fileName","split","pop","language","_jsxs","style","padding","height","overflow","background","children","_jsx","Typography","Title","level","color","marginBottom","borderBottom","paddingBottom","display","justifyContent","paddingTop","Spin","size","Alert","message","type","showIcon","fallback","markdown"],"sourceRoot":""}
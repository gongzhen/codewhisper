{"version":3,"file":"static/js/71078.075d7fd0.chunk.js","mappings":"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","sources":["components/DiffTestView.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Card, Tag, Space, Typography, Alert, Divider, Tabs, Button, Spin, message, Radio } from 'antd';\nimport { useTheme } from '../context/ThemeContext';\nimport MarkdownRenderer from './MarkdownRenderer';\nimport { RenderPath } from './MarkdownRenderer';\nimport { DiffTestRunner } from '../utils/diffTestRunner';\nimport { diffTestSuites } from '../utils/diffTestCases';\nimport { DiffTestReport } from '../utils/diffTestTypes';\n\nconst { Title, Text } = Typography;\nconst { TabPane } = Tabs;\n\nconst renderPathOptions = [\n    { label: 'Full Pipeline', value: 'full' },\n    { label: 'Prism Only', value: 'prismOnly' },\n    { label: 'Diff Only', value: 'diffOnly' },\n    { label: 'Raw', value: 'raw' }\n];\n\ninterface TestCase {\n    id: string;\n    name: string;\n    category: string;\n    subcategory: string;\n    description: string;\n    tags: string[];\n    diff: string;\n    sourceFile?: string;\n    sourceContent?: string;\n    expectedResult: {\n        shouldApplyCleanly: boolean;\n        expectedErrors?: string[];\n    };\n}\n\nconst DiffTestView: React.FC = () => {\n    const { isDarkMode } = useTheme();\n    const [testCases, setTestCases] = useState<TestCase[]>([]);\n    const [selectedCategory, setSelectedCategory] = useState<string>('all');\n    const [loading, setLoading] = useState(true);\n    const [validationResults, setValidationResults] = useState<Record<string, boolean>>({});\n    const [testReport, setTestReport] = useState<DiffTestReport | null>(null);\n    const [isRunningTests, setIsRunningTests] = useState(false);\n    const [renderPath, setRenderPath] = useState<RenderPath>('full');\n\n    const runAllTests = async () => {\n        setIsRunningTests(true);\n        const testRunner = new DiffTestRunner();\n        try {\n            const results = await Promise.all(\n                diffTestSuites.map(suite => testRunner.runSuite(suite))\n            );\n            setTestReport(results[0]);\n            message.success('Test suite completed');\n        } catch (error) {\n            message.error('Failed to run tests');\n            console.error('Test error:', error);\n        } finally {\n            setIsRunningTests(false);\n        }\n    };\n\n    useEffect(() => {\n        async function loadCases() {\n            setLoading(true);\n            try {\n                const basePath = `${process.env.PUBLIC_URL || ''}/codewhisper-testcases`;\n                console.log('Loading test cases from:', basePath);\n\n                const response = await fetch(`${basePath}/index.json`);\n                if (!response.ok) {\n                    throw new Error(`Failed to load index.json: ${response.statusText}`);\n                }\n                const index = await response.json();\n                console.log('Index loaded:', index);\n\n                const allCases = await Promise.all(\n                    Object.entries(index.testSets || {}).map(async ([category, setInfo]: [string, any]) => {\n                        return Promise.all(setInfo.cases.map(async (caseId: string) => {\n                            const [metaResponse, diffResponse] = await Promise.all([\n                                fetch(`${basePath}/${setInfo.path}/${caseId}.meta.json`),\n                                fetch(`${basePath}/${setInfo.path}/${caseId}.diff`)\n                            ]);\n\n                            const metadata = await metaResponse.json();\n                            const diff = await diffResponse.text();\n\n                            return { ...metadata, id: caseId, category, diff };\n                        }));\n                    })\n                );\n\n                const validCases = allCases.flat().filter((testCase): testCase is TestCase =>\n                    Boolean(testCase) && Boolean(testCase.id) && Boolean(testCase.name) &&\n                    Array.isArray(testCase.tags));\n                setTestCases(validCases);\n            } catch (error) {\n                console.error('Error loading test cases:', error);\n                message.error('Failed to load test cases');\n            } finally {\n                setLoading(false);\n            }\n        }\n        loadCases();\n    }, []);\n\n    const validateDiff = async (testCase: TestCase) => {\n        try {\n            const response = await fetch('/api/apply-changes', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    diff: testCase.diff,\n                    filePath: testCase.sourceFile,\n                    content: testCase.sourceContent,\n                    validate: true\n                })\n            });\n\n            const success = response.ok;\n            setValidationResults(prev => ({\n                ...prev,\n                [testCase.id]: success\n            }));\n\n            message.success(success ? 'Diff validation successful' : 'Diff validation failed');\n            return success;\n        } catch (error) {\n            console.error('Validation error:', error);\n            message.error('Validation error occurred');\n            return false;\n        }\n    };\n\n    const categories = [...new Set(testCases.map(tc => tc.category))];\n    const filteredCases = selectedCategory === 'all'\n        ? testCases\n        : testCases.filter(tc => tc.category === selectedCategory);\n\n    const gridStyle = {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fill, minmax(600px, 1fr))',\n        gap: '16px',\n        padding: '16px'\n    };\n\n    return (\n        <div>\n            <Space direction=\"vertical\" style={{ width: '100%', marginBottom: '16px' }}>\n                <Title level={3}>Diff Rendering Test Cases</Title>\n                <Space>\n                    <Button\n                        type=\"primary\"\n                        onClick={runAllTests}\n                        loading={isRunningTests}\n                    >\n                        Run All Tests\n                    </Button>\n                    <Button\n                        onClick={() => setValidationResults({})}\n                        disabled={Object.keys(validationResults).length === 0}\n                    >\n                        Clear Results\n                    </Button>\n                </Space>\n            </Space>\n\n            {loading ? (\n                <div style={{ textAlign: 'center', padding: '40px' }}>\n                    <Spin size=\"large\" />\n                    <div style={{ marginTop: '16px' }}>Loading test cases...</div>\n                </div>\n            ) : (\n                <>\n                    <Alert\n                        message=\"Visual Verification Suite\"\n                        description={`${testCases.length} test cases loaded across ${categories.length} categories.\n                                    Each case can be validated against its source file when provided.`}\n                        type=\"info\"\n                        showIcon\n                        style={{ margin: '16px' }}\n                    />\n\n                    <Card style={{ margin: '16px' }}>\n                        <Space direction=\"vertical\">\n                            <Text strong>Render Pipeline Control</Text>\n                            <Radio.Group \n                                options={renderPathOptions} \n                                onChange={e => setRenderPath(e.target.value)} \n                                value={renderPath}\n                                optionType=\"button\"\n                                buttonStyle=\"solid\"\n                            />\n                        </Space>\n                    </Card>\n\n                    {testReport && (\n                        <Alert\n                            message=\"Test Results\"\n                            description={\n                                <Space direction=\"vertical\" size=\"small\">\n                                    <Title level={5}>Summary</Title>\n                                    <Space direction=\"vertical\">\n                                        <Text>Total Suites: {testReport.summary.totalSuites}</Text>\n                                        <Text>Total Tests: {testReport.summary.totalTests}</Text>\n                                        <Text>Passed: {testReport.summary.totalPassed}</Text>\n                                        <Text>Failed: {testReport.summary.totalFailed}</Text>\n                                        <Text>Skipped: {testReport.summary.totalSkipped}</Text>\n                                        <Text>Duration: {testReport.summary.totalDuration}ms</Text>\n                                    </Space>\n\n                                    <Divider />\n\n                                    <Title level={5}>Suite Details</Title>\n                                    {testReport.suiteResults.map((suite, index) => (\n                                        <Card size=\"small\" key={index} style={{ marginBottom: 8 }}>\n                                            <Space direction=\"vertical\">\n                                                <Text strong>{suite.suiteName}</Text>\n                                                <Space>\n                                                    <Tag color=\"blue\">{suite.totalTests} tests</Tag>\n                                                    <Tag color=\"success\">{suite.passed} passed</Tag>\n                                                    {suite.failed > 0 && <Tag color=\"error\">{suite.failed} failed</Tag>}\n                                                    {suite.skipped > 0 && <Tag color=\"warning\">{suite.skipped} skipped</Tag>}\n                                                </Space>\n                                            </Space>\n                                        </Card>\n                                    ))}\n                                </Space>\n                            }\n                            type={testReport.summary.totalFailed === 0 ? \"success\" : \"warning\"}\n                            showIcon\n                            style={{ margin: '16px' }}\n                        />\n                    )}\n\n                    <Tabs\n                        activeKey={selectedCategory}\n                        onChange={setSelectedCategory}\n                        style={{ margin: '0 16px' }}\n                    >\n                        <TabPane tab=\"All Cases\" key=\"all\" />\n                        {categories.map(category => (\n                            <TabPane tab={category} key={category} />\n                        ))}\n                    </Tabs>\n\n                    <div style={gridStyle}>\n                        {filteredCases.map(testCase => (\n                            <Card\n                                key={testCase.id}\n                                title={testCase.name}\n                                extra={\n                                    <Space>\n                                        <Tag color=\"blue\">{testCase.id}</Tag>\n                                        <Tag color=\"purple\">{testCase.category}</Tag>\n                                        {testCase.subcategory && (\n                                            <Tag color=\"cyan\">{testCase.subcategory}</Tag>\n                                        )}\n                                        {validationResults[testCase.id] !== undefined && (\n                                            <Tag color={validationResults[testCase.id] ? 'success' : 'error'}>\n                                                {validationResults[testCase.id] ? 'Valid' : 'Invalid'}\n                                            </Tag>\n                                        )}\n                                    </Space>\n                                }\n                            >\n                                <Space direction=\"vertical\" style={{ width: '100%' }}>\n                                    <Text type=\"secondary\">{testCase.description}</Text>\n                                    {testCase.tags && testCase.tags.length > 0 && (\n                                        <Space wrap>\n                                            {testCase.tags.map(tag => (\n                                                <Tag key={tag}>{tag}</Tag>\n                                            ))}\n                                        </Space>\n                                    )}\n                                    <div className=\"diff-container\">\n                                        <MarkdownRenderer\n                                            markdown={`\\`\\`\\`diff\\n${testCase.diff}\\n\\`\\`\\``}\n                                            enableCodeApply={false}\n                                            renderPath={renderPath}\n                                        />\n                                    </div>\n                                    {testCase.sourceContent && (\n                                        <>\n                                            <Divider>Source File</Divider>\n                                            <pre style={{\n                                                backgroundColor: isDarkMode ? '#1f1f1f' : '#f6f8fa',\n                                                padding: '16px',\n                                                borderRadius: '6px',\n                                                overflow: 'auto'\n                                            }}>\n                                                <code>{testCase.sourceContent}</code>\n                                            </pre>\n                                        </>\n                                    )}\n                                    <Button\n                                        onClick={() => validateDiff(testCase)}\n                                        style={{ marginTop: '8px' }}\n                                    >\n                                        Validate Diff\n                                    </Button>\n                                </Space>\n                            </Card>\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default DiffTestView;\n"],"names":["Title","Text","Typography","TabPane","Tabs","renderPathOptions","label","value","DiffTestView","isDarkMode","useTheme","testCases","setTestCases","useState","selectedCategory","setSelectedCategory","loading","setLoading","validationResults","setValidationResults","testReport","setTestReport","isRunningTests","setIsRunningTests","renderPath","setRenderPath","useEffect","async","basePath","console","log","response","fetch","ok","Error","statusText","index","json","validCases","Promise","all","Object","entries","testSets","map","category","setInfo","_ref","cases","metaResponse","diffResponse","path","caseId","metadata","diff","text","id","flat","filter","testCase","Boolean","name","Array","isArray","tags","error","message","loadCases","categories","Set","tc","filteredCases","_jsxs","children","Space","direction","style","width","marginBottom","_jsx","level","Button","type","onClick","testRunner","DiffTestRunner","results","diffTestSuites","suite","runSuite","success","disabled","keys","length","textAlign","padding","Spin","size","marginTop","_Fragment","Alert","description","showIcon","margin","Card","strong","Radio","options","onChange","e","target","optionType","buttonStyle","summary","totalSuites","totalTests","totalPassed","totalFailed","totalSkipped","totalDuration","Divider","suiteResults","suiteName","Tag","color","passed","failed","skipped","activeKey","tab","display","gridTemplateColumns","gap","title","extra","subcategory","undefined","wrap","tag","className","MarkdownRenderer","markdown","enableCodeApply","sourceContent","backgroundColor","borderRadius","overflow","method","headers","body","JSON","stringify","filePath","sourceFile","content","validate","prev","validateDiff"],"sourceRoot":""}